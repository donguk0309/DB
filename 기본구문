-- 1. 테이블 생성 및 삭제
CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT);
CREATE TABLE IF NOT EXISTS teachers (id INTEGER PRIMARY KEY, name TEXT);
DROP TABLE IF EXISTS students;
ALTER TABLE students ADD COLUMN age INTEGER;
ALTER TABLE students RENAME TO pupils;

-- 2. 데이터 삽입 (INSERT)
INSERT INTO students (id, name) VALUES (1, 'Kim');
INSERT INTO students (name) VALUES ('Lee');
INSERT INTO students (name, age) VALUES ('Park', 22);
INSERT INTO students DEFAULT VALUES;
INSERT OR IGNORE INTO students (id, name) VALUES (1, 'Kim');
INSERT OR REPLACE INTO students (id, name) VALUES (1, 'Kim');
INSERT INTO students SELECT * FROM old_students;
INSERT INTO students (name) VALUES ('Choi'), ('Jung'), ('Han');

-- 3. 데이터 조회 (SELECT)
SELECT * FROM students;
SELECT id, name FROM students;
SELECT DISTINCT major FROM students;
SELECT * FROM students WHERE age > 20;
SELECT * FROM students WHERE name LIKE 'K%';
SELECT * FROM students ORDER BY age DESC;
SELECT COUNT(*) FROM students;
SELECT AVG(age) FROM students;
SELECT MAX(age) FROM students;
SELECT MIN(age) FROM students;
SELECT SUM(age) FROM students;
SELECT name || ' is ' || age || ' years old' FROM students;
SELECT * FROM students LIMIT 10 OFFSET 5;
SELECT * FROM students WHERE age BETWEEN 18 AND 22;
SELECT * FROM students WHERE name IN ('Kim', 'Lee');
SELECT * FROM students WHERE age IS NULL;
SELECT * FROM students WHERE age IS NOT NULL;

-- 4. 데이터 수정 (UPDATE)
UPDATE students SET age = 21 WHERE name = 'Kim';
UPDATE students SET major = 'Math' WHERE id = 1;
UPDATE students SET age = age + 1;
UPDATE students SET name = UPPER(name);
UPDATE students SET major = NULL WHERE major = '';

-- 5. 데이터 삭제 (DELETE)
DELETE FROM students WHERE age < 20;
DELETE FROM students WHERE name = 'Park';
DELETE FROM students;
DELETE FROM students WHERE id IN (1,2,3);

-- 6. 테이블과 데이터 구조 조회
PRAGMA table_info(students);
PRAGMA foreign_key_list(students);
SELECT name FROM sqlite_master WHERE type='table';
SELECT sql FROM sqlite_master WHERE tbl_name='students' AND type='table';

-- 7. 인덱스 및 제약 조건
CREATE UNIQUE INDEX idx_name ON students(name);
DROP INDEX IF EXISTS idx_name;
CREATE INDEX idx_age ON students(age);
ALTER TABLE students ADD CONSTRAINT chk_age CHECK(age >= 0);
PRAGMA foreign_keys = ON;
CREATE TABLE courses (
  id INTEGER PRIMARY KEY,
  name TEXT,
  student_id INTEGER,
  FOREIGN KEY(student_id) REFERENCES students(id)
);

-- 8. 트랜잭션
BEGIN TRANSACTION;
COMMIT;
ROLLBACK;

-- 9. 뷰(View)
CREATE VIEW student_view AS SELECT name, age FROM students WHERE age >= 20;
DROP VIEW IF EXISTS student_view;
SELECT * FROM student_view;

-- 10. 조인 (JOIN)
SELECT s.name, c.name FROM students s JOIN courses c ON s.id = c.student_id;
SELECT s.name, c.name FROM students s LEFT JOIN courses c ON s.id = c.student_id;
SELECT s.name, c.name FROM students s INNER JOIN courses c ON s.id = c.student_id;
SELECT * FROM students CROSS JOIN courses;

-- 11. 서브쿼리 (Subquery)
SELECT * FROM students WHERE age > (SELECT AVG(age) FROM students);
SELECT name FROM students WHERE id IN (SELECT student_id FROM courses);
SELECT name FROM students WHERE EXISTS (SELECT 1 FROM courses WHERE student_id = students.id);
SELECT name FROM students WHERE NOT EXISTS (SELECT 1 FROM courses WHERE student_id = students.id);

-- 12. 집계 함수와 그룹핑 (Aggregate & Group By)
SELECT major, COUNT(*) FROM students GROUP BY major;
SELECT major, AVG(age) FROM students GROUP BY major HAVING COUNT(*) > 1;
SELECT COUNT(DISTINCT major) FROM students;

-- 13. 문자열 함수
SELECT LENGTH(name) FROM students;
SELECT UPPER(name) FROM students;
SELECT LOWER(name) FROM students;
SELECT SUBSTR(name, 1, 3) FROM students;
SELECT TRIM(name) FROM students;

-- 14. 날짜 및 시간 함수
SELECT DATE('now');
SELECT TIME('now');
SELECT DATETIME('now');
SELECT STRFTIME('%Y-%m-%d', 'now');
SELECT JULIANDAY('now');

-- 15. 기타 유용한 명령어 및 함수
SELECT COALESCE(NULL, 'default');
SELECT IFNULL(NULL, 'default');
SELECT RANDOM();
SELECT RANDOM() % 100;
SELECT typeof(age) FROM students LIMIT 1;
EXPLAIN QUERY PLAN SELECT * FROM students WHERE age > 20;
PRAGMA encoding;
PRAGMA cache_size;
PRAGMA page_size;
PRAGMA synchronous;
PRAGMA journal_mode;
PRAGMA temp_store;
ANALYZE;
VACUUM;
REINDEX;
SAVEPOINT sp1;
RELEASE sp1;
SELECT sqlite_version();
SELECT quote('Hello');
SELECT group_concat(name, ', ') FROM students;
SELECT changes();
SELECT last_insert_rowid();

7. 인덱스 및 제약 조건 (Indexes & Constraints)
인덱스(Index)
인덱스는 책의 색인처럼, 데이터를 빨리 찾도록 돕는 자료구조예요.

예를 들어 학생 테이블에서 name으로 검색할 일이 많다면, name 컬럼에 인덱스를 만들면 조회 속도가 빨라져요.

단, 인덱스는 저장공간을 더 쓰고, 데이터 추가/수정/삭제할 때 약간 느려질 수 있어요.

제약 조건(Constraint)
데이터의 무결성을 보장하기 위한 규칙이에요.

예를 들어, 학생 나이가 음수일 수 없게 하려면 CHECK(age >= 0) 같은 제약 조건을 걸 수 있어요.

제약 조건이 걸린 컬럼에 규칙에 맞지 않는 데이터를 넣으면 에러가 납니다.

8. 트랜잭션 (Transaction)
트랜잭션은 여러 작업을 하나의 묶음으로 처리하는 거예요.

예를 들어 학생 데이터 여러 개를 삽입할 때, 중간에 오류가 생기면 모두 취소하고 원래 상태로 되돌릴 수 있어요.

BEGIN TRANSACTION;으로 시작해서, 작업 끝나면 COMMIT;으로 확정하거나, 문제가 생기면 ROLLBACK;으로 취소합니다.

9. 뷰(View)
**뷰(View)**는 저장된 SELECT 쿼리 결과에 이름을 붙여놓은 것 같아요.

마치 가상의 테이블처럼 쓸 수 있어요.

복잡한 쿼리를 반복해서 쓰기 편하게 만들어 줍니다.

10. 조인 (JOIN)
여러 테이블에서 관련된 데이터를 합쳐서 보여줄 때 씁니다.

예) 학생과 수강과목 테이블이 있을 때, 학생 이름과 수강 과목을 함께 보여줄 때

종류:

INNER JOIN: 양쪽 테이블 모두 조건에 맞는 데이터만

LEFT JOIN: 왼쪽 테이블 데이터는 모두 나오고, 오른쪽은 조건에 맞는 것만

CROSS JOIN: 모든 조합 다 보여줌(곱집합)

SQLite는 RIGHT JOIN을 지원하지 않아요.

11. 서브쿼리 (Subquery)
쿼리 안에 또 다른 쿼리가 들어가는 거예요.

예) 학생 중 나이가 평균 이상인 사람만 찾으려면,

(SELECT AVG(age) FROM students) 로 평균을 먼저 구하고

그 결과를 이용해서 조건 처리합니다.

12. 집계 함수와 그룹핑 (Aggregate & Group By)
집계 함수: 여러 행을 하나로 요약하는 함수예요.

예) COUNT(), SUM(), AVG(), MAX(), MIN()

그룹핑: 데이터를 특정 컬럼 기준으로 묶어서 집계함수를 적용해요.

예) 전공별 학생 수를 알고 싶을 때, GROUP BY major 하고 COUNT(*) 하면 전공별 학생 수를 줍니다.

-- 1. 테이블 생성 및 삭제
CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT);
CREATE TABLE IF NOT EXISTS teachers (id INTEGER PRIMARY KEY, name TEXT);
DROP TABLE IF EXISTS students;
ALTER TABLE students ADD COLUMN age INTEGER;
ALTER TABLE students RENAME TO pupils;

-- 2. 데이터 삽입 (INSERT)
INSERT INTO students (id, name) VALUES (1, 'Kim');
INSERT INTO students (name) VALUES ('Lee');
INSERT INTO students (name, age) VALUES ('Park', 22);
INSERT INTO students DEFAULT VALUES;
INSERT OR IGNORE INTO students (id, name) VALUES (1, 'Kim');
INSERT OR REPLACE INTO students (id, name) VALUES (1, 'Kim');
INSERT INTO students SELECT * FROM old_students;
INSERT INTO students (name) VALUES ('Choi'), ('Jung'), ('Han');

-- 3. 데이터 조회 (SELECT)
SELECT * FROM students;
SELECT id, name FROM students;
SELECT DISTINCT major FROM students;
SELECT * FROM students WHERE age > 20;
SELECT * FROM students WHERE name LIKE 'K%';
SELECT * FROM students ORDER BY age DESC;
SELECT COUNT(*) FROM students;
SELECT AVG(age) FROM students;
SELECT MAX(age) FROM students;
SELECT MIN(age) FROM students;
SELECT SUM(age) FROM students;
SELECT name || ' is ' || age || ' years old' FROM students;
SELECT * FROM students LIMIT 10 OFFSET 5;
SELECT * FROM students WHERE age BETWEEN 18 AND 22;
SELECT * FROM students WHERE name IN ('Kim', 'Lee');
SELECT * FROM students WHERE age IS NULL;
SELECT * FROM students WHERE age IS NOT NULL;

-- 4. 데이터 수정 (UPDATE)
UPDATE students SET age = 21 WHERE name = 'Kim';
UPDATE students SET major = 'Math' WHERE id = 1;
UPDATE students SET age = age + 1;
UPDATE students SET name = UPPER(name);
UPDATE students SET major = NULL WHERE major = '';

-- 5. 데이터 삭제 (DELETE)
DELETE FROM students WHERE age < 20;
DELETE FROM students WHERE name = 'Park';
DELETE FROM students;
DELETE FROM students WHERE id IN (1,2,3);

-- 6. 테이블과 데이터 구조 조회
PRAGMA table_info(students);
PRAGMA foreign_key_list(students);
SELECT name FROM sqlite_master WHERE type='table';
SELECT sql FROM sqlite_master WHERE tbl_name='students' AND type='table';

-- 7. 인덱스 및 제약 조건
CREATE UNIQUE INDEX idx_name ON students(name);
DROP INDEX IF EXISTS idx_name;
CREATE INDEX idx_age ON students(age);
ALTER TABLE students ADD CONSTRAINT chk_age CHECK(age >= 0);
PRAGMA foreign_keys = ON;
CREATE TABLE courses (
  id INTEGER PRIMARY KEY,
  name TEXT,
  student_id INTEGER,
  FOREIGN KEY(student_id) REFERENCES students(id)
);

-- 8. 트랜잭션
BEGIN TRANSACTION;
COMMIT;
ROLLBACK;

-- 9. 뷰(View)
CREATE VIEW student_view AS SELECT name, age FROM students WHERE age >= 20;
DROP VIEW IF EXISTS student_view;
SELECT * FROM student_view;

-- 10. 조인 (JOIN)
SELECT s.name, c.name FROM students s JOIN courses c ON s.id = c.student_id;
SELECT s.name, c.name FROM students s LEFT JOIN courses c ON s.id = c.student_id;
SELECT s.name, c.name FROM students s INNER JOIN courses c ON s.id = c.student_id;
SELECT * FROM students CROSS JOIN courses;

-- 11. 서브쿼리 (Subquery)
SELECT * FROM students WHERE age > (SELECT AVG(age) FROM students);
SELECT name FROM students WHERE id IN (SELECT student_id FROM courses);
SELECT name FROM students WHERE EXISTS (SELECT 1 FROM courses WHERE student_id = students.id);
SELECT name FROM students WHERE NOT EXISTS (SELECT 1 FROM courses WHERE student_id = students.id);

-- 12. 집계 함수와 그룹핑 (Aggregate & Group By)
SELECT major, COUNT(*) FROM students GROUP BY major;
SELECT major, AVG(age) FROM students GROUP BY major HAVING COUNT(*) > 1;
SELECT COUNT(DISTINCT major) FROM students;

-- 13. 문자열 함수
SELECT LENGTH(name) FROM students;
SELECT UPPER(name) FROM students;
SELECT LOWER(name) FROM students;
SELECT SUBSTR(name, 1, 3) FROM students;
SELECT TRIM(name) FROM students;

-- 14. 날짜 및 시간 함수
SELECT DATE('now');
SELECT TIME('now');
SELECT DATETIME('now');
SELECT STRFTIME('%Y-%m-%d', 'now');
SELECT JULIANDAY('now');

-- 15. 기타 유용한 명령어 및 함수
SELECT COALESCE(NULL, 'default');
SELECT IFNULL(NULL, 'default');
SELECT RANDOM();
SELECT RANDOM() % 100;
SELECT typeof(age) FROM students LIMIT 1;
EXPLAIN QUERY PLAN SELECT * FROM students WHERE age > 20;
PRAGMA encoding;
PRAGMA cache_size;
PRAGMA page_size;
PRAGMA synchronous;
PRAGMA journal_mode;
PRAGMA temp_store;
ANALYZE;
VACUUM;
REINDEX;
SAVEPOINT sp1;
RELEASE sp1;
SELECT sqlite_version();
SELECT quote('Hello');
SELECT group_concat(name, ', ') FROM students;
SELECT changes();
SELECT last_insert_rowid();
